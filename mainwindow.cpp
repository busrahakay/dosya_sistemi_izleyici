// MainWindow sÄ±nÄ±fÄ±nÄ±n tanÄ±mlamalarÄ±nÄ± iÃ§eren baÅŸlÄ±k dosyasÄ± dahil edilir.
#include "mainwindow.h"

// Qt'nin yatay dÃ¼zenleri, dosya seÃ§im penceresi ve dizin iÅŸlemleri iÃ§in gerekli kÃ¼tÃ¼phaneler dahil edilir.
#include <QHBoxLayout>
#include <QFileDialog>
#include <QDir>

// ğŸ“Œ **MainWindow YapÄ±cÄ± Fonksiyonu**
MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent), watcher(new QFileSystemWatcher(this)) // Dosya sistemindeki deÄŸiÅŸiklikleri izleyen nesneyi oluÅŸturur.
{
    setupUI(); // ArayÃ¼zÃ¼ baÅŸlatÄ±r.

    // Dosya ve dizin deÄŸiÅŸikliklerini algÄ±lamak iÃ§in QFileSystemWatcher sinyallerine baÄŸlanÄ±r.
    connect(watcher, &QFileSystemWatcher::directoryChanged, this, &MainWindow::onDirectoryChanged);
    connect(watcher, &QFileSystemWatcher::fileChanged, this, &MainWindow::onFileChanged);
}

// ğŸ“Œ **YÄ±kÄ±cÄ± Fonksiyon (Destructor)**
MainWindow::~MainWindow()
{
    delete watcher; // Bellek sÄ±zÄ±ntÄ±sÄ±nÄ± Ã¶nlemek iÃ§in QFileSystemWatcher nesnesi silinir.
}

// ğŸ“Œ **ArayÃ¼zÃ¼ oluÅŸturan fonksiyon**
void MainWindow::setupUI()
{
    // Ana pencerenin iÃ§eriÄŸini iÃ§eren widget oluÅŸturulur.
    QWidget *centralWidget = new QWidget(this);
    setCentralWidget(centralWidget);

    // Dikey dÃ¼zen oluÅŸturuluyor.
    layout = new QVBoxLayout(centralWidget);

    // "Ä°zlenen Dizin" baÅŸlÄ±ÄŸÄ± ekleniyor.
    QLabel *titleLabel = new QLabel("Ä°zlenen Dizin:", this);
    layout->addWidget(titleLabel);

    // SeÃ§ilen dizini gÃ¶stermek iÃ§in salt okunur bir giriÅŸ kutusu oluÅŸturuluyor.
    pathDisplay = new QLineEdit(this);
    pathDisplay->setReadOnly(true); // KullanÄ±cÄ± tarafÄ±ndan deÄŸiÅŸtirilemez.
    layout->addWidget(pathDisplay);

    // **Dizin seÃ§me butonu**
    addButton = new QPushButton("Dizin SeÃ§", this);
    addButton->setStyleSheet("background-color: #4CAF50; color: white; border-radius: 5px; padding: 5px;");
    layout->addWidget(addButton);
    connect(addButton, &QPushButton::clicked, this, &MainWindow::addDirectory); // Butona tÄ±klanÄ±nca addDirectory Ã§aÄŸrÄ±lÄ±r.

    // **Ä°zlemeyi durdurma butonu**
    removeButton = new QPushButton("Ä°zlemeyi Durdur", this);
    removeButton->setStyleSheet("background-color: #f44336; color: white; border-radius: 5px; padding: 5px;");
    layout->addWidget(removeButton);
    connect(removeButton, &QPushButton::clicked, this, &MainWindow::removeDirectory);

    // "DeÄŸiÅŸiklikler" baÅŸlÄ±ÄŸÄ± ekleniyor.
    QLabel *logTitle = new QLabel("DeÄŸiÅŸiklikler:", this);
    layout->addWidget(logTitle);

    // DeÄŸiÅŸiklikleri gÃ¶stermek iÃ§in liste oluÅŸturuluyor.
    logList = new QListWidget(this);
    layout->addWidget(logList);

    // Pencere baÅŸlÄ±ÄŸÄ±nÄ± ve boyutunu belirleme
    setWindowTitle("Windows Dosya Dizin Ä°zleyici");
    resize(400, 300);
}

// ğŸ“Œ **KullanÄ±cÄ±nÄ±n seÃ§tiÄŸi dizini izlemeye ekler**
void MainWindow::addDirectory()
{
    // KullanÄ±cÄ±dan bir dizin seÃ§mesini isteyen pencere aÃ§Ä±lÄ±r.
    QString dirPath = QFileDialog::getExistingDirectory(this, "Dizin SeÃ§");

    // EÄŸer kullanÄ±cÄ± geÃ§erli bir dizin seÃ§tiyse ve daha Ã¶nce eklenmediyse
    if (!dirPath.isEmpty() && !directorySet.contains(dirPath)) {
        logMessage("Ä°zlenmeye baÅŸlandÄ±: " + dirPath);
        watcher->addPath(dirPath); // SeÃ§ilen dizin QFileSystemWatcher ile izlenmeye baÅŸlar.
        directorySet.insert(dirPath); // Dizinin izlenenler listesine eklenmesi

        pathDisplay->setText(dirPath); // SeÃ§ilen dizin arayÃ¼zde gÃ¶sterilir.

        fileTimestamps.clear();  // Ã–nceki kayÄ±tlar temizlenir.
        isFirstScan = true; // Ä°lk tarama yapÄ±lacaÄŸÄ±nÄ± belirtir.
        scanDirectory(); // Dizin iÃ§eriÄŸini tarar.
    }
}

// ğŸ“Œ **SeÃ§ili dizini listeden kaldÄ±rÄ±r ve izlemeyi durdurur**
void MainWindow::removeDirectory()
{
    QString dirPath = pathDisplay->text();
    if (!dirPath.isEmpty()) {
        watcher->removePath(dirPath); // Ä°zleme durdurulur.
        directorySet.remove(dirPath); // Ä°zlenenler listesinden Ã§Ä±karÄ±lÄ±r.

        // ArayÃ¼zÃ¼ temizle
        pathDisplay->clear();
        logList->clear();
        fileTimestamps.clear();

        isFirstScan = true; // Yeni bir dizin eklenirse tekrar ilk tarama yapÄ±lacak
        logMessage("Ä°zleme durduruldu: " + dirPath);
    }
}

// ğŸ“Œ **Dizin deÄŸiÅŸtiÄŸinde tarama yap**
void MainWindow::onDirectoryChanged(const QString &path)
{
    logMessage("Dizin deÄŸiÅŸti: " + path);
    scanDirectory(); // Dizin iÃ§eriÄŸini kontrol eder.
}

// ğŸ“Œ **Dosya deÄŸiÅŸtiÄŸinde kaydet**
void MainWindow::onFileChanged(const QString &path)
{
    logMessage("Dosya gÃ¼ncellendi: " + path);
}

// ğŸ“Œ **Dizindeki tÃ¼m dosya ve klasÃ¶rleri kontrol edip deÄŸiÅŸiklikleri yakalar**
void MainWindow::scanDirectory()
{
    QString dirPath = pathDisplay->text();
    if (dirPath.isEmpty()) return;

    QDir dir(dirPath);
    QFileInfoList fileList = dir.entryInfoList(QDir::Files | QDir::Dirs | QDir::NoDotAndDotDot);

    QMap<QString, QDateTime> currentFiles;

    for (const QFileInfo &file : fileList) {
        QString filePath = file.absoluteFilePath();
        QDateTime lastModified = file.lastModified();

        currentFiles[filePath] = lastModified;

        // Yeni eklenen dosya veya klasÃ¶rleri tespit eder.
        if (!fileTimestamps.contains(filePath)) {
            if (file.isDir()) {
                logMessage(isFirstScan ? "Dizin iÃ§erisinde bulunan klasÃ¶r: " + file.fileName() : "Yeni klasÃ¶r eklendi: " + file.fileName());
            } else {
                logMessage(isFirstScan ? "Dizin iÃ§erisinde bulunan dosya: " + file.fileName() : "Yeni dosya eklendi: " + file.fileName());
            }
        }
        // Dosya gÃ¼ncellendi mi kontrol edilir.
        else if (fileTimestamps[filePath] != lastModified) {
            logMessage("Dosya gÃ¼ncellendi: " + file.fileName());
        }
    }

    // Silinen dosya veya klasÃ¶rleri tespit eder
    for (const QString &oldFilePath : fileTimestamps.keys()) {
        if (!currentFiles.contains(oldFilePath)) {
            QFileInfo info(oldFilePath);
            logMessage(info.isDir() ? "KlasÃ¶r silindi: " + info.fileName() : "Dosya silindi: " + info.fileName());
        }
    }

    fileTimestamps = currentFiles;
    isFirstScan = false; // Ä°lk tarama tamamlandÄ±.
}

// ğŸ“Œ **DeÄŸiÅŸiklikleri logList adlÄ± listeye ekler**
void MainWindow::logMessage(const QString &message)
{
    logList->addItem(message); // Listeye mesaj eklenir.
}
